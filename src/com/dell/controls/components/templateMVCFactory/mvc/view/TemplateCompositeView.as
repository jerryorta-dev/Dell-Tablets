package com.dell.controls.components.templateMVCFactory.mvc.view {import com.dell.controls.components.templateMVCFactory.mvc.control.ITemplateController;import com.dell.controls.components.templateMVCFactory.mvc.model.ITemplateModel;import com.dell.controls.components.templateMVCFactory.mvc.view.core.AbstractCompositeView;import com.dell.events.UIEvent;import flash.display.DisplayObject;import flash.geom.*;	import flash.events.*;    import com.dell.controls.components.templateMVCFactory.mvc.view.core.abstract.AbstractTemplateComponentView    public class TemplateCompositeView extends AbstractCompositeView {        private var viewState:Object;				public function TemplateCompositeView(aModel:ITemplateModel, aController:ITemplateController = null, target:DisplayObject = null) {						super(aModel, aController);			            //You can add an event handler here            target.addEventListener( UIEvent.UPDATE_CONTROLLER, sendEventToController, false, 0, true);						//Initialize UI			this.update();        }        override public function add(c:AbstractTemplateComponentView):void {            super.add( c );            c.addEventListener( UIEvent.UPDATE_CONTROLLER, sendEventToController, false, 0, true );        }        /**         * <p>Update the View UI based on model state change data.</p>         * <p>Call this.viewState or this.model.state to get updated data</p>         */        private function changeUIElementsFromModelData():void {            //Change UI to reflect mode state change        }		override public function update(event:UIEvent = null):void {            this.viewState = this.model.state;            this.changeUIElementsFromModelData();            super.update( event );		}        protected function sendEventToController(event:UIEvent):void {            // delegate to the controller (strategy) to handle it            (controller as ITemplateController).viewEventHandler( event );        }	}}