package com.dell.controls.components.scrubbers.mvc.view {import com.dell.controls.components.core.abstract.AbstractUI;import com.dell.controls.components.scrubbers.mvc.control.IScrubberController;import com.dell.controls.components.scrubbers.mvc.view.core.AbstractScrubberCompositeView;import com.dell.controls.components.templateMVCFactory.mvc.control.ITemplateController;import com.dell.events.UIEvent;import flash.display.DisplayObject;
public class ScrubberCompositeView extends AbstractScrubberCompositeView {    private var viewState:Object;    private var _target:DisplayObject;    public function ScrubberCompositeView(aModel:Object, aController:IScrubberController = null, target:DisplayObject = null) {        super(aModel, aController);        //You can add an event handler here        if (target != null) {            this.activate();        }        //Initialize UI        this.update();    }    override public function add(c:AbstractUI):void {        super.add(c);//            c.addEventListener( UIEvent.UPDATE_CONTROLLER, sendEventToController, false, 0, true );    }    override public function activate():Boolean {        _target.addEventListener(UIEvent.UPDATE_CONTROLLER, sendEventToController, false, 0, true);        return true;    }    override public function deactivate():Boolean {        _target.removeEventListener(UIEvent.UPDATE_CONTROLLER, sendEventToController);        return true;    }    /**     * <p>Update the View UI based on model state change data.</p>     * <p>Call this.viewState or this.model.state to get updated data</p>     */    private function changeUIElementsFromModelData():void {        //Change UI to reflect mode state change    }    override public function update(event:UIEvent = null):void {        this.viewState = this.model.state;        this.changeUIElementsFromModelData();        super.update(event);    }    protected function sendEventToController(event:UIEvent):void {        // delegate to the controller (strategy) to handle it        (controller as ITemplateController).viewEventHandler(event);    }}}