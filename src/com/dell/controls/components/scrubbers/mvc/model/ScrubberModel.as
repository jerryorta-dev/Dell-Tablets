package com.dell.controls.components.scrubbers.mvc.model {import com.dell.events.UIEvent;import flash.events.EventDispatcher;import flash.events.IEventDispatcher;public class ScrubberModel extends EventDispatcher implements IScrubberModel {    private var vars:Object;//    private var _eventObject:UIEvent;    private var _state:Number;    private var _onUpdate:Function;    private var _onComplete:Function;    private var _displayObject:IEventDispatcher;    public function ScrubberModel( target:IEventDispatcher = null, vars:Object = null ) {        this._displayObject = target;        this.vars = ( vars != null ) ? vars : {};        this._onUpdate = ( this.vars.onUpdate != null) ? this.vars.onUpdate : null;        this._onComplete = ( this.vars.onComplete != null ) ? this.vars.onComplete : null;    }    protected function update( value:Number ):void {//        dispatchEvent(new UIEvent(UIEvent.UPDATE_VIEW, _state.data));//        dispatchEvent(new UIEvent( UIEvent.SCRUBBING, _state.data ));//        this.notifyMVCUpdate( _state );        if (this._onUpdate != null) {            this._onUpdate.call( null, value );        }    }    public function get eventUpdateObjectFromController():Number {        return _state;    }    //FROM CONTROLLER    public function set eventUpdateObjectFromController( value:Number ):void {        if ( isNaN( _state ) || _state != value ) {            _state =  value; //Do some crazy algorithm here//            dispatchEvent(new UIEvent(UIEvent.SCRUBBING, _state.data));            this.update( value)        }    }    //FROM CONTROLLER    public function get eventCompleteObjectFromController():Number {        return _state;    }    public function set eventCompleteObjectFromController( value:Number ):void {//        trace(event.data);        _state = value; //Do some crazy algorithm here//        dispatchEvent(new UIEvent(UIEvent.SCRUB_COMPLETE, value));        if (this._onComplete != null) {            this._onComplete.call( null, value );        }    }    public function get state():Number {        return _state;    }}}